// Code generated by counterfeiter. DO NOT EDIT.
package grafeasfakes

import (
	"context"
	"sync"

	"github.com/rode/rode/pkg/grafeas"
	"github.com/rode/rode/protodeps/grafeas/proto/v1beta1/grafeas_go_proto"
)

type FakeExtensions struct {
	ListVersionedResourceOccurrencesStub        func(context.Context, string, string, int32) ([]*grafeas_go_proto.Occurrence, string, error)
	listVersionedResourceOccurrencesMutex       sync.RWMutex
	listVersionedResourceOccurrencesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int32
	}
	listVersionedResourceOccurrencesReturns struct {
		result1 []*grafeas_go_proto.Occurrence
		result2 string
		result3 error
	}
	listVersionedResourceOccurrencesReturnsOnCall map[int]struct {
		result1 []*grafeas_go_proto.Occurrence
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExtensions) ListVersionedResourceOccurrences(arg1 context.Context, arg2 string, arg3 string, arg4 int32) ([]*grafeas_go_proto.Occurrence, string, error) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	ret, specificReturn := fake.listVersionedResourceOccurrencesReturnsOnCall[len(fake.listVersionedResourceOccurrencesArgsForCall)]
	fake.listVersionedResourceOccurrencesArgsForCall = append(fake.listVersionedResourceOccurrencesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int32
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListVersionedResourceOccurrencesStub
	fakeReturns := fake.listVersionedResourceOccurrencesReturns
	fake.recordInvocation("ListVersionedResourceOccurrences", []interface{}{arg1, arg2, arg3, arg4})
	fake.listVersionedResourceOccurrencesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeExtensions) ListVersionedResourceOccurrencesCallCount() int {
	fake.listVersionedResourceOccurrencesMutex.RLock()
	defer fake.listVersionedResourceOccurrencesMutex.RUnlock()
	return len(fake.listVersionedResourceOccurrencesArgsForCall)
}

func (fake *FakeExtensions) ListVersionedResourceOccurrencesCalls(stub func(context.Context, string, string, int32) ([]*grafeas_go_proto.Occurrence, string, error)) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	defer fake.listVersionedResourceOccurrencesMutex.Unlock()
	fake.ListVersionedResourceOccurrencesStub = stub
}

func (fake *FakeExtensions) ListVersionedResourceOccurrencesArgsForCall(i int) (context.Context, string, string, int32) {
	fake.listVersionedResourceOccurrencesMutex.RLock()
	defer fake.listVersionedResourceOccurrencesMutex.RUnlock()
	argsForCall := fake.listVersionedResourceOccurrencesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeExtensions) ListVersionedResourceOccurrencesReturns(result1 []*grafeas_go_proto.Occurrence, result2 string, result3 error) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	defer fake.listVersionedResourceOccurrencesMutex.Unlock()
	fake.ListVersionedResourceOccurrencesStub = nil
	fake.listVersionedResourceOccurrencesReturns = struct {
		result1 []*grafeas_go_proto.Occurrence
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeExtensions) ListVersionedResourceOccurrencesReturnsOnCall(i int, result1 []*grafeas_go_proto.Occurrence, result2 string, result3 error) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	defer fake.listVersionedResourceOccurrencesMutex.Unlock()
	fake.ListVersionedResourceOccurrencesStub = nil
	if fake.listVersionedResourceOccurrencesReturnsOnCall == nil {
		fake.listVersionedResourceOccurrencesReturnsOnCall = make(map[int]struct {
			result1 []*grafeas_go_proto.Occurrence
			result2 string
			result3 error
		})
	}
	fake.listVersionedResourceOccurrencesReturnsOnCall[i] = struct {
		result1 []*grafeas_go_proto.Occurrence
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeExtensions) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listVersionedResourceOccurrencesMutex.RLock()
	defer fake.listVersionedResourceOccurrencesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExtensions) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ grafeas.Extensions = new(FakeExtensions)
