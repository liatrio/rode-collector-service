// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	"context"
	"sync"

	"github.com/rode/rode/pkg/resource"
	"github.com/rode/rode/proto/v1alpha1"
)

type FakeManager struct {
	BatchCreateGenericResourcesStub        func(context.Context, *v1alpha1.BatchCreateOccurrencesRequest) error
	batchCreateGenericResourcesMutex       sync.RWMutex
	batchCreateGenericResourcesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.BatchCreateOccurrencesRequest
	}
	batchCreateGenericResourcesReturns struct {
		result1 error
	}
	batchCreateGenericResourcesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) BatchCreateGenericResources(arg1 context.Context, arg2 *v1alpha1.BatchCreateOccurrencesRequest) error {
	fake.batchCreateGenericResourcesMutex.Lock()
	ret, specificReturn := fake.batchCreateGenericResourcesReturnsOnCall[len(fake.batchCreateGenericResourcesArgsForCall)]
	fake.batchCreateGenericResourcesArgsForCall = append(fake.batchCreateGenericResourcesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.BatchCreateOccurrencesRequest
	}{arg1, arg2})
	stub := fake.BatchCreateGenericResourcesStub
	fakeReturns := fake.batchCreateGenericResourcesReturns
	fake.recordInvocation("BatchCreateGenericResources", []interface{}{arg1, arg2})
	fake.batchCreateGenericResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) BatchCreateGenericResourcesCallCount() int {
	fake.batchCreateGenericResourcesMutex.RLock()
	defer fake.batchCreateGenericResourcesMutex.RUnlock()
	return len(fake.batchCreateGenericResourcesArgsForCall)
}

func (fake *FakeManager) BatchCreateGenericResourcesCalls(stub func(context.Context, *v1alpha1.BatchCreateOccurrencesRequest) error) {
	fake.batchCreateGenericResourcesMutex.Lock()
	defer fake.batchCreateGenericResourcesMutex.Unlock()
	fake.BatchCreateGenericResourcesStub = stub
}

func (fake *FakeManager) BatchCreateGenericResourcesArgsForCall(i int) (context.Context, *v1alpha1.BatchCreateOccurrencesRequest) {
	fake.batchCreateGenericResourcesMutex.RLock()
	defer fake.batchCreateGenericResourcesMutex.RUnlock()
	argsForCall := fake.batchCreateGenericResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) BatchCreateGenericResourcesReturns(result1 error) {
	fake.batchCreateGenericResourcesMutex.Lock()
	defer fake.batchCreateGenericResourcesMutex.Unlock()
	fake.BatchCreateGenericResourcesStub = nil
	fake.batchCreateGenericResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) BatchCreateGenericResourcesReturnsOnCall(i int, result1 error) {
	fake.batchCreateGenericResourcesMutex.Lock()
	defer fake.batchCreateGenericResourcesMutex.Unlock()
	fake.BatchCreateGenericResourcesStub = nil
	if fake.batchCreateGenericResourcesReturnsOnCall == nil {
		fake.batchCreateGenericResourcesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.batchCreateGenericResourcesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.batchCreateGenericResourcesMutex.RLock()
	defer fake.batchCreateGenericResourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.Manager = new(FakeManager)
