// Code generated by counterfeiter. DO NOT EDIT.
package evaluationfakes

import (
	"context"
	"sync"

	"github.com/rode/rode/pkg/evaluation"
	"github.com/rode/rode/proto/v1alpha1"
)

type FakeManager struct {
	EvaluatePolicyStub        func(context.Context, *v1alpha1.EvaluatePolicyRequest) (*v1alpha1.EvaluatePolicyResponse, error)
	evaluatePolicyMutex       sync.RWMutex
	evaluatePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.EvaluatePolicyRequest
	}
	evaluatePolicyReturns struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}
	evaluatePolicyReturnsOnCall map[int]struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}
	EvaluateResourceStub        func(context.Context, *v1alpha1.ResourceEvaluationRequest) (*v1alpha1.ResourceEvaluationResult, error)
	evaluateResourceMutex       sync.RWMutex
	evaluateResourceArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ResourceEvaluationRequest
	}
	evaluateResourceReturns struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	evaluateResourceReturnsOnCall map[int]struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	GetResourceEvaluationStub        func(context.Context, *v1alpha1.GetResourceEvaluationRequest) (*v1alpha1.ResourceEvaluationResult, error)
	getResourceEvaluationMutex       sync.RWMutex
	getResourceEvaluationArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.GetResourceEvaluationRequest
	}
	getResourceEvaluationReturns struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	getResourceEvaluationReturnsOnCall map[int]struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	ListResourceEvaluationsStub        func(context.Context, *v1alpha1.ListResourceEvaluationsRequest) (*v1alpha1.ListResourceEvaluationsResponse, error)
	listResourceEvaluationsMutex       sync.RWMutex
	listResourceEvaluationsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourceEvaluationsRequest
	}
	listResourceEvaluationsReturns struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}
	listResourceEvaluationsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) EvaluatePolicy(arg1 context.Context, arg2 *v1alpha1.EvaluatePolicyRequest) (*v1alpha1.EvaluatePolicyResponse, error) {
	fake.evaluatePolicyMutex.Lock()
	ret, specificReturn := fake.evaluatePolicyReturnsOnCall[len(fake.evaluatePolicyArgsForCall)]
	fake.evaluatePolicyArgsForCall = append(fake.evaluatePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.EvaluatePolicyRequest
	}{arg1, arg2})
	stub := fake.EvaluatePolicyStub
	fakeReturns := fake.evaluatePolicyReturns
	fake.recordInvocation("EvaluatePolicy", []interface{}{arg1, arg2})
	fake.evaluatePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) EvaluatePolicyCallCount() int {
	fake.evaluatePolicyMutex.RLock()
	defer fake.evaluatePolicyMutex.RUnlock()
	return len(fake.evaluatePolicyArgsForCall)
}

func (fake *FakeManager) EvaluatePolicyCalls(stub func(context.Context, *v1alpha1.EvaluatePolicyRequest) (*v1alpha1.EvaluatePolicyResponse, error)) {
	fake.evaluatePolicyMutex.Lock()
	defer fake.evaluatePolicyMutex.Unlock()
	fake.EvaluatePolicyStub = stub
}

func (fake *FakeManager) EvaluatePolicyArgsForCall(i int) (context.Context, *v1alpha1.EvaluatePolicyRequest) {
	fake.evaluatePolicyMutex.RLock()
	defer fake.evaluatePolicyMutex.RUnlock()
	argsForCall := fake.evaluatePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) EvaluatePolicyReturns(result1 *v1alpha1.EvaluatePolicyResponse, result2 error) {
	fake.evaluatePolicyMutex.Lock()
	defer fake.evaluatePolicyMutex.Unlock()
	fake.EvaluatePolicyStub = nil
	fake.evaluatePolicyReturns = struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) EvaluatePolicyReturnsOnCall(i int, result1 *v1alpha1.EvaluatePolicyResponse, result2 error) {
	fake.evaluatePolicyMutex.Lock()
	defer fake.evaluatePolicyMutex.Unlock()
	fake.EvaluatePolicyStub = nil
	if fake.evaluatePolicyReturnsOnCall == nil {
		fake.evaluatePolicyReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.EvaluatePolicyResponse
			result2 error
		})
	}
	fake.evaluatePolicyReturnsOnCall[i] = struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) EvaluateResource(arg1 context.Context, arg2 *v1alpha1.ResourceEvaluationRequest) (*v1alpha1.ResourceEvaluationResult, error) {
	fake.evaluateResourceMutex.Lock()
	ret, specificReturn := fake.evaluateResourceReturnsOnCall[len(fake.evaluateResourceArgsForCall)]
	fake.evaluateResourceArgsForCall = append(fake.evaluateResourceArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ResourceEvaluationRequest
	}{arg1, arg2})
	stub := fake.EvaluateResourceStub
	fakeReturns := fake.evaluateResourceReturns
	fake.recordInvocation("EvaluateResource", []interface{}{arg1, arg2})
	fake.evaluateResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) EvaluateResourceCallCount() int {
	fake.evaluateResourceMutex.RLock()
	defer fake.evaluateResourceMutex.RUnlock()
	return len(fake.evaluateResourceArgsForCall)
}

func (fake *FakeManager) EvaluateResourceCalls(stub func(context.Context, *v1alpha1.ResourceEvaluationRequest) (*v1alpha1.ResourceEvaluationResult, error)) {
	fake.evaluateResourceMutex.Lock()
	defer fake.evaluateResourceMutex.Unlock()
	fake.EvaluateResourceStub = stub
}

func (fake *FakeManager) EvaluateResourceArgsForCall(i int) (context.Context, *v1alpha1.ResourceEvaluationRequest) {
	fake.evaluateResourceMutex.RLock()
	defer fake.evaluateResourceMutex.RUnlock()
	argsForCall := fake.evaluateResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) EvaluateResourceReturns(result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.evaluateResourceMutex.Lock()
	defer fake.evaluateResourceMutex.Unlock()
	fake.EvaluateResourceStub = nil
	fake.evaluateResourceReturns = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) EvaluateResourceReturnsOnCall(i int, result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.evaluateResourceMutex.Lock()
	defer fake.evaluateResourceMutex.Unlock()
	fake.EvaluateResourceStub = nil
	if fake.evaluateResourceReturnsOnCall == nil {
		fake.evaluateResourceReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ResourceEvaluationResult
			result2 error
		})
	}
	fake.evaluateResourceReturnsOnCall[i] = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetResourceEvaluation(arg1 context.Context, arg2 *v1alpha1.GetResourceEvaluationRequest) (*v1alpha1.ResourceEvaluationResult, error) {
	fake.getResourceEvaluationMutex.Lock()
	ret, specificReturn := fake.getResourceEvaluationReturnsOnCall[len(fake.getResourceEvaluationArgsForCall)]
	fake.getResourceEvaluationArgsForCall = append(fake.getResourceEvaluationArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.GetResourceEvaluationRequest
	}{arg1, arg2})
	stub := fake.GetResourceEvaluationStub
	fakeReturns := fake.getResourceEvaluationReturns
	fake.recordInvocation("GetResourceEvaluation", []interface{}{arg1, arg2})
	fake.getResourceEvaluationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetResourceEvaluationCallCount() int {
	fake.getResourceEvaluationMutex.RLock()
	defer fake.getResourceEvaluationMutex.RUnlock()
	return len(fake.getResourceEvaluationArgsForCall)
}

func (fake *FakeManager) GetResourceEvaluationCalls(stub func(context.Context, *v1alpha1.GetResourceEvaluationRequest) (*v1alpha1.ResourceEvaluationResult, error)) {
	fake.getResourceEvaluationMutex.Lock()
	defer fake.getResourceEvaluationMutex.Unlock()
	fake.GetResourceEvaluationStub = stub
}

func (fake *FakeManager) GetResourceEvaluationArgsForCall(i int) (context.Context, *v1alpha1.GetResourceEvaluationRequest) {
	fake.getResourceEvaluationMutex.RLock()
	defer fake.getResourceEvaluationMutex.RUnlock()
	argsForCall := fake.getResourceEvaluationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) GetResourceEvaluationReturns(result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.getResourceEvaluationMutex.Lock()
	defer fake.getResourceEvaluationMutex.Unlock()
	fake.GetResourceEvaluationStub = nil
	fake.getResourceEvaluationReturns = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetResourceEvaluationReturnsOnCall(i int, result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.getResourceEvaluationMutex.Lock()
	defer fake.getResourceEvaluationMutex.Unlock()
	fake.GetResourceEvaluationStub = nil
	if fake.getResourceEvaluationReturnsOnCall == nil {
		fake.getResourceEvaluationReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ResourceEvaluationResult
			result2 error
		})
	}
	fake.getResourceEvaluationReturnsOnCall[i] = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListResourceEvaluations(arg1 context.Context, arg2 *v1alpha1.ListResourceEvaluationsRequest) (*v1alpha1.ListResourceEvaluationsResponse, error) {
	fake.listResourceEvaluationsMutex.Lock()
	ret, specificReturn := fake.listResourceEvaluationsReturnsOnCall[len(fake.listResourceEvaluationsArgsForCall)]
	fake.listResourceEvaluationsArgsForCall = append(fake.listResourceEvaluationsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourceEvaluationsRequest
	}{arg1, arg2})
	stub := fake.ListResourceEvaluationsStub
	fakeReturns := fake.listResourceEvaluationsReturns
	fake.recordInvocation("ListResourceEvaluations", []interface{}{arg1, arg2})
	fake.listResourceEvaluationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) ListResourceEvaluationsCallCount() int {
	fake.listResourceEvaluationsMutex.RLock()
	defer fake.listResourceEvaluationsMutex.RUnlock()
	return len(fake.listResourceEvaluationsArgsForCall)
}

func (fake *FakeManager) ListResourceEvaluationsCalls(stub func(context.Context, *v1alpha1.ListResourceEvaluationsRequest) (*v1alpha1.ListResourceEvaluationsResponse, error)) {
	fake.listResourceEvaluationsMutex.Lock()
	defer fake.listResourceEvaluationsMutex.Unlock()
	fake.ListResourceEvaluationsStub = stub
}

func (fake *FakeManager) ListResourceEvaluationsArgsForCall(i int) (context.Context, *v1alpha1.ListResourceEvaluationsRequest) {
	fake.listResourceEvaluationsMutex.RLock()
	defer fake.listResourceEvaluationsMutex.RUnlock()
	argsForCall := fake.listResourceEvaluationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) ListResourceEvaluationsReturns(result1 *v1alpha1.ListResourceEvaluationsResponse, result2 error) {
	fake.listResourceEvaluationsMutex.Lock()
	defer fake.listResourceEvaluationsMutex.Unlock()
	fake.ListResourceEvaluationsStub = nil
	fake.listResourceEvaluationsReturns = struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListResourceEvaluationsReturnsOnCall(i int, result1 *v1alpha1.ListResourceEvaluationsResponse, result2 error) {
	fake.listResourceEvaluationsMutex.Lock()
	defer fake.listResourceEvaluationsMutex.Unlock()
	fake.ListResourceEvaluationsStub = nil
	if fake.listResourceEvaluationsReturnsOnCall == nil {
		fake.listResourceEvaluationsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListResourceEvaluationsResponse
			result2 error
		})
	}
	fake.listResourceEvaluationsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluatePolicyMutex.RLock()
	defer fake.evaluatePolicyMutex.RUnlock()
	fake.evaluateResourceMutex.RLock()
	defer fake.evaluateResourceMutex.RUnlock()
	fake.getResourceEvaluationMutex.RLock()
	defer fake.getResourceEvaluationMutex.RUnlock()
	fake.listResourceEvaluationsMutex.RLock()
	defer fake.listResourceEvaluationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ evaluation.Manager = new(FakeManager)
