// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/rode/rode/protodeps/grafeas/proto/v1beta1/project_go_proto"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

type FakeProjectsClient struct {
	CreateProjectStub        func(context.Context, *project_go_proto.CreateProjectRequest, ...grpc.CallOption) (*project_go_proto.Project, error)
	createProjectMutex       sync.RWMutex
	createProjectArgsForCall []struct {
		arg1 context.Context
		arg2 *project_go_proto.CreateProjectRequest
		arg3 []grpc.CallOption
	}
	createProjectReturns struct {
		result1 *project_go_proto.Project
		result2 error
	}
	createProjectReturnsOnCall map[int]struct {
		result1 *project_go_proto.Project
		result2 error
	}
	DeleteProjectStub        func(context.Context, *project_go_proto.DeleteProjectRequest, ...grpc.CallOption) (*emptypb.Empty, error)
	deleteProjectMutex       sync.RWMutex
	deleteProjectArgsForCall []struct {
		arg1 context.Context
		arg2 *project_go_proto.DeleteProjectRequest
		arg3 []grpc.CallOption
	}
	deleteProjectReturns struct {
		result1 *emptypb.Empty
		result2 error
	}
	deleteProjectReturnsOnCall map[int]struct {
		result1 *emptypb.Empty
		result2 error
	}
	GetProjectStub        func(context.Context, *project_go_proto.GetProjectRequest, ...grpc.CallOption) (*project_go_proto.Project, error)
	getProjectMutex       sync.RWMutex
	getProjectArgsForCall []struct {
		arg1 context.Context
		arg2 *project_go_proto.GetProjectRequest
		arg3 []grpc.CallOption
	}
	getProjectReturns struct {
		result1 *project_go_proto.Project
		result2 error
	}
	getProjectReturnsOnCall map[int]struct {
		result1 *project_go_proto.Project
		result2 error
	}
	ListProjectsStub        func(context.Context, *project_go_proto.ListProjectsRequest, ...grpc.CallOption) (*project_go_proto.ListProjectsResponse, error)
	listProjectsMutex       sync.RWMutex
	listProjectsArgsForCall []struct {
		arg1 context.Context
		arg2 *project_go_proto.ListProjectsRequest
		arg3 []grpc.CallOption
	}
	listProjectsReturns struct {
		result1 *project_go_proto.ListProjectsResponse
		result2 error
	}
	listProjectsReturnsOnCall map[int]struct {
		result1 *project_go_proto.ListProjectsResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProjectsClient) CreateProject(arg1 context.Context, arg2 *project_go_proto.CreateProjectRequest, arg3 ...grpc.CallOption) (*project_go_proto.Project, error) {
	fake.createProjectMutex.Lock()
	ret, specificReturn := fake.createProjectReturnsOnCall[len(fake.createProjectArgsForCall)]
	fake.createProjectArgsForCall = append(fake.createProjectArgsForCall, struct {
		arg1 context.Context
		arg2 *project_go_proto.CreateProjectRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateProjectStub
	fakeReturns := fake.createProjectReturns
	fake.recordInvocation("CreateProject", []interface{}{arg1, arg2, arg3})
	fake.createProjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProjectsClient) CreateProjectCallCount() int {
	fake.createProjectMutex.RLock()
	defer fake.createProjectMutex.RUnlock()
	return len(fake.createProjectArgsForCall)
}

func (fake *FakeProjectsClient) CreateProjectCalls(stub func(context.Context, *project_go_proto.CreateProjectRequest, ...grpc.CallOption) (*project_go_proto.Project, error)) {
	fake.createProjectMutex.Lock()
	defer fake.createProjectMutex.Unlock()
	fake.CreateProjectStub = stub
}

func (fake *FakeProjectsClient) CreateProjectArgsForCall(i int) (context.Context, *project_go_proto.CreateProjectRequest, []grpc.CallOption) {
	fake.createProjectMutex.RLock()
	defer fake.createProjectMutex.RUnlock()
	argsForCall := fake.createProjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProjectsClient) CreateProjectReturns(result1 *project_go_proto.Project, result2 error) {
	fake.createProjectMutex.Lock()
	defer fake.createProjectMutex.Unlock()
	fake.CreateProjectStub = nil
	fake.createProjectReturns = struct {
		result1 *project_go_proto.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) CreateProjectReturnsOnCall(i int, result1 *project_go_proto.Project, result2 error) {
	fake.createProjectMutex.Lock()
	defer fake.createProjectMutex.Unlock()
	fake.CreateProjectStub = nil
	if fake.createProjectReturnsOnCall == nil {
		fake.createProjectReturnsOnCall = make(map[int]struct {
			result1 *project_go_proto.Project
			result2 error
		})
	}
	fake.createProjectReturnsOnCall[i] = struct {
		result1 *project_go_proto.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) DeleteProject(arg1 context.Context, arg2 *project_go_proto.DeleteProjectRequest, arg3 ...grpc.CallOption) (*emptypb.Empty, error) {
	fake.deleteProjectMutex.Lock()
	ret, specificReturn := fake.deleteProjectReturnsOnCall[len(fake.deleteProjectArgsForCall)]
	fake.deleteProjectArgsForCall = append(fake.deleteProjectArgsForCall, struct {
		arg1 context.Context
		arg2 *project_go_proto.DeleteProjectRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeleteProjectStub
	fakeReturns := fake.deleteProjectReturns
	fake.recordInvocation("DeleteProject", []interface{}{arg1, arg2, arg3})
	fake.deleteProjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProjectsClient) DeleteProjectCallCount() int {
	fake.deleteProjectMutex.RLock()
	defer fake.deleteProjectMutex.RUnlock()
	return len(fake.deleteProjectArgsForCall)
}

func (fake *FakeProjectsClient) DeleteProjectCalls(stub func(context.Context, *project_go_proto.DeleteProjectRequest, ...grpc.CallOption) (*emptypb.Empty, error)) {
	fake.deleteProjectMutex.Lock()
	defer fake.deleteProjectMutex.Unlock()
	fake.DeleteProjectStub = stub
}

func (fake *FakeProjectsClient) DeleteProjectArgsForCall(i int) (context.Context, *project_go_proto.DeleteProjectRequest, []grpc.CallOption) {
	fake.deleteProjectMutex.RLock()
	defer fake.deleteProjectMutex.RUnlock()
	argsForCall := fake.deleteProjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProjectsClient) DeleteProjectReturns(result1 *emptypb.Empty, result2 error) {
	fake.deleteProjectMutex.Lock()
	defer fake.deleteProjectMutex.Unlock()
	fake.DeleteProjectStub = nil
	fake.deleteProjectReturns = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) DeleteProjectReturnsOnCall(i int, result1 *emptypb.Empty, result2 error) {
	fake.deleteProjectMutex.Lock()
	defer fake.deleteProjectMutex.Unlock()
	fake.DeleteProjectStub = nil
	if fake.deleteProjectReturnsOnCall == nil {
		fake.deleteProjectReturnsOnCall = make(map[int]struct {
			result1 *emptypb.Empty
			result2 error
		})
	}
	fake.deleteProjectReturnsOnCall[i] = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) GetProject(arg1 context.Context, arg2 *project_go_proto.GetProjectRequest, arg3 ...grpc.CallOption) (*project_go_proto.Project, error) {
	fake.getProjectMutex.Lock()
	ret, specificReturn := fake.getProjectReturnsOnCall[len(fake.getProjectArgsForCall)]
	fake.getProjectArgsForCall = append(fake.getProjectArgsForCall, struct {
		arg1 context.Context
		arg2 *project_go_proto.GetProjectRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetProjectStub
	fakeReturns := fake.getProjectReturns
	fake.recordInvocation("GetProject", []interface{}{arg1, arg2, arg3})
	fake.getProjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProjectsClient) GetProjectCallCount() int {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	return len(fake.getProjectArgsForCall)
}

func (fake *FakeProjectsClient) GetProjectCalls(stub func(context.Context, *project_go_proto.GetProjectRequest, ...grpc.CallOption) (*project_go_proto.Project, error)) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = stub
}

func (fake *FakeProjectsClient) GetProjectArgsForCall(i int) (context.Context, *project_go_proto.GetProjectRequest, []grpc.CallOption) {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	argsForCall := fake.getProjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProjectsClient) GetProjectReturns(result1 *project_go_proto.Project, result2 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	fake.getProjectReturns = struct {
		result1 *project_go_proto.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) GetProjectReturnsOnCall(i int, result1 *project_go_proto.Project, result2 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	if fake.getProjectReturnsOnCall == nil {
		fake.getProjectReturnsOnCall = make(map[int]struct {
			result1 *project_go_proto.Project
			result2 error
		})
	}
	fake.getProjectReturnsOnCall[i] = struct {
		result1 *project_go_proto.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) ListProjects(arg1 context.Context, arg2 *project_go_proto.ListProjectsRequest, arg3 ...grpc.CallOption) (*project_go_proto.ListProjectsResponse, error) {
	fake.listProjectsMutex.Lock()
	ret, specificReturn := fake.listProjectsReturnsOnCall[len(fake.listProjectsArgsForCall)]
	fake.listProjectsArgsForCall = append(fake.listProjectsArgsForCall, struct {
		arg1 context.Context
		arg2 *project_go_proto.ListProjectsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListProjectsStub
	fakeReturns := fake.listProjectsReturns
	fake.recordInvocation("ListProjects", []interface{}{arg1, arg2, arg3})
	fake.listProjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProjectsClient) ListProjectsCallCount() int {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	return len(fake.listProjectsArgsForCall)
}

func (fake *FakeProjectsClient) ListProjectsCalls(stub func(context.Context, *project_go_proto.ListProjectsRequest, ...grpc.CallOption) (*project_go_proto.ListProjectsResponse, error)) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = stub
}

func (fake *FakeProjectsClient) ListProjectsArgsForCall(i int) (context.Context, *project_go_proto.ListProjectsRequest, []grpc.CallOption) {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	argsForCall := fake.listProjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProjectsClient) ListProjectsReturns(result1 *project_go_proto.ListProjectsResponse, result2 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	fake.listProjectsReturns = struct {
		result1 *project_go_proto.ListProjectsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) ListProjectsReturnsOnCall(i int, result1 *project_go_proto.ListProjectsResponse, result2 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	if fake.listProjectsReturnsOnCall == nil {
		fake.listProjectsReturnsOnCall = make(map[int]struct {
			result1 *project_go_proto.ListProjectsResponse
			result2 error
		})
	}
	fake.listProjectsReturnsOnCall[i] = struct {
		result1 *project_go_proto.ListProjectsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProjectMutex.RLock()
	defer fake.createProjectMutex.RUnlock()
	fake.deleteProjectMutex.RLock()
	defer fake.deleteProjectMutex.RUnlock()
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProjectsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ project_go_proto.ProjectsClient = new(FakeProjectsClient)
