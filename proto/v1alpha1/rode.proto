// Copyright 2021 The Rode Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package rode.v1alpha1;

option go_package = "github.com/rode/rode/proto/v1alpha1";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "proto/v1alpha1/rode_policy.proto";
import "proto/v1beta1/grafeas.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

service Rode {
  // Create occurrences
  rpc BatchCreateOccurrences(BatchCreateOccurrencesRequest) returns (BatchCreateOccurrencesResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/occurrences:batchCreate"
      body: "*"
    };
  }
  // Verify that an artifact satisfies a policy
  rpc EvaluatePolicy(EvaluatePolicyRequest) returns (EvaluatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/policies/{policy}:attest"
      body: "*"
    };
  }
  // List resource URI
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/resources"
    };
  }
  rpc ListGenericResources(ListGenericResourcesRequest) returns (ListGenericResourcesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/generic-resources"
    };
  }
  // ListGenericResourceVersions can be used to list all known versions of a generic resource. Versions will always include
  // the unique identifier (in the case of Docker images, the sha256) and will optionally include any related names (in the
  // case of Docker images, any associated tags for the image).
  rpc ListGenericResourceVersions(ListGenericResourceVersionsRequest) returns (ListGenericResourceVersionsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/generic-resource-versions"
    };
  }
  rpc ListVersionedResourceOccurrences(ListVersionedResourceOccurrencesRequest) returns (ListVersionedResourceOccurrencesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/versioned-resource-occurrences"
    };
  }
  rpc ListOccurrences(ListOccurrencesRequest) returns (ListOccurrencesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/occurrences"
    };
  }
  rpc UpdateOccurrence(UpdateOccurrenceRequest) returns (grafeas.v1beta1.Occurrence) {
    option (google.api.http) = {
      patch: "/v1alpha1/occurrences/{id}"
      body: "occurrence"
    };
    option (google.api.method_signature) = "name,occurrence,update_mask";
  }
  rpc CreatePolicy(Policy) returns (Policy) {
    option (google.api.http) = {
      post: "/v1alpha1/policies"
      body: "*"
    };
  }
  rpc GetPolicy(GetPolicyRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/v1alpha1/policies/{id}"
    };
  }
  rpc DeletePolicy(DeletePolicyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/policies/{id}"
    };
  }
  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/policies"
    };
    option (google.api.method_signature) = "filter";
  }
  rpc ValidatePolicy(ValidatePolicyRequest) returns (ValidatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/policies:validate"
      body: "*"
    };
  }
  rpc UpdatePolicy(UpdatePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      patch: "/v1alpha1/policies/{policy.id}"
      body: "policy"
    };
    option (google.api.method_signature) = "policy";
  }
  // RegisterCollector accepts a collector ID and a list of notes that this collector will reference when creating
  // occurrences. The response will contain the notes with the fully qualified note name. This operation is idempotent,
  // so any notes that already exist will not be re-created. Collectors are expected to invoke this RPC each time they
  // start.
  rpc RegisterCollector(RegisterCollectorRequest) returns (RegisterCollectorResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/collectors/{id}:register"
      body: "*"
    };
  }
  // CreateNote acts as a simple proxy to the grafeas CreateNote rpc
  rpc CreateNote(CreateNoteRequest) returns (grafeas.v1beta1.Note) {
    option (google.api.http) = {
      post: "/v1alpha1/notes"
      body: "note"
    };
    option (google.api.method_signature) = "note_id,note";
  };
}

enum ResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0;
  DOCKER = 1;
  GIT = 2;
  MAVEN = 3;
  FILE = 4;
  NPM = 5;
  NUGET = 6;
  PIP = 7;
  DEBIAN = 8;
  RPM = 9;
}

message GenericResource {
  // Id represents the unique id of the generic resource. This is usually the resource prefix plus the name, except in the
  // case of Docker images. The id is used as a parameter for the ListGenericResourceVersions RPC.
  string id = 1;

  // Name represents the name of this generic resource as seen on the UI.
  string name = 2;

  // Type represents the resource type for this generic resource, such as "DOCKER" or "GIT"
  ResourceType type = 3;

  google.protobuf.Timestamp created = 4;
}

message GenericResourceVersion {
  // Version represents the unique artifact version as a fully qualified URI.
  // Example: a Docker image version might look like this: harbor.liatr.io/rode-demo/node-app@sha256:a235554754f9bf075ac1c1b70c224ef5997176b776f0c56e340aeb63f429ace8
  string version = 1;

  // Names represents related artifact names, if they exist. This information will be sourced from build occurrences.
  // Example: a Docker image name might look like this: harbor.liatr.io/rode-demo/node-app:latest
  repeated string names = 2;

  google.protobuf.Timestamp created = 3;
}

// Request to create occurrences in batch.
message BatchCreateOccurrencesRequest {
  // The occurrences to create.
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
}

// Response for creating occurrences in batch.
message BatchCreateOccurrencesResponse {
  // The occurrences that were created.
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
}

// modeled after Grafeas' ListOccurrence request/response
// https://github.com/grafeas/grafeas/blob/5b072a9930eace404066502b49a72e5b420d3576/proto/v1beta1/grafeas.proto#L345-L374
message ListResourcesRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;
}
// https://github.com/grafeas/grafeas/blob/5b072a9930eace404066502b49a72e5b420d3576/proto/v1beta1/grafeas.proto#L254-L271

message ListResourcesResponse {
  repeated grafeas.v1beta1.Resource resources = 1;
  string next_page_token = 2;
}

message ListGenericResourcesRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListGenericResourcesResponse {
  repeated GenericResource generic_resources = 1;
  string next_page_token = 2;
}

message ListVersionedResourceOccurrencesRequest {
  string resource_uri = 1;
  int32 page_size = 2;
  string page_token = 3;

  // FetchRelatedNotes represents whether or not the notes attached to each occurrence should also be returned in the response.
  bool fetch_related_notes = 4;
}

message ListVersionedResourceOccurrencesResponse {
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
  string next_page_token = 2;

  // RelatedNotes are returned when FetchRelatedNotes on the request is set to true.
  map<string, grafeas.v1beta1.Note> related_notes = 3;
}

message ListOccurrencesRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListOccurrencesResponse {
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
  string next_page_token = 2;
}

message UpdateOccurrenceRequest {
  string id = 1;
  grafeas.v1beta1.Occurrence occurrence = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message RegisterCollectorRequest {
  string id = 1;
  repeated grafeas.v1beta1.Note notes = 2;
}

message RegisterCollectorResponse {
  map<string, grafeas.v1beta1.Note> notes = 1;
}

message CreateNoteRequest {
  string note_id = 1 [(google.api.field_behavior) = REQUIRED];
  grafeas.v1beta1.Note note = 2 [(google.api.field_behavior) = REQUIRED];
}

message ListGenericResourceVersionsRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string filter = 2;

  int32 page_size = 3;
  string page_token = 4;
}

message ListGenericResourceVersionsResponse {
  repeated GenericResourceVersion versions = 1;
  string next_page_token = 2;
}
