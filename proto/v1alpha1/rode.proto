// Copyright 2021 The Rode Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package rode.v1alpha1;

option go_package = "github.com/rode/rode/proto/v1alpha1";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "proto/v1alpha1/rode-policy.proto";
import "proto/v1beta1/grafeas.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

service Rode {
  // Create occurrences
  rpc BatchCreateOccurrences(BatchCreateOccurrencesRequest) returns (BatchCreateOccurrencesResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/occurrences:batchCreate"
      body: "*"
    };
  }
  // Verify that an artifact satisfies a policy
  rpc EvaluatePolicy(EvaluatePolicyRequest) returns (EvaluatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/policies/{policy}:attest"
      body: "*"
    };
  }
  // List resource URI
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/resources"
    };
  }
  rpc ListGenericResources(ListGenericResourcesRequest) returns (ListGenericResourcesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/generic-resources"
    };
  }
  rpc ListOccurrences(ListOccurrencesRequest) returns (ListOccurrencesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/occurrences"
    };
  }
  rpc UpdateOccurrence(UpdateOccurrenceRequest) returns (grafeas.v1beta1.Occurrence) {
    option (google.api.http) = {
      patch: "/v1alpha1/occurrences/{id}"
      body: "occurrence"
    };
    option (google.api.method_signature) = "name,occurrence,update_mask";
  }
  rpc CreatePolicy(PolicyEntity) returns (Policy) {
    option (google.api.http) = {
      post: "/v1alpha1/policies"
      body: "*"
    };
  }
  rpc GetPolicy(GetPolicyRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/v1alpha1/policies/{id}"
    };
  }
  rpc DeletePolicy(DeletePolicyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/policies/{id}"
    };
  }
  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/policies"
    };
    option (google.api.method_signature) = "filter";
  }
  rpc ValidatePolicy(ValidatePolicyRequest) returns (ValidatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/policies:validate"
      body: "*"
    };
  }
  rpc UpdatePolicy(UpdatePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      patch: "/v1alpha1/policies/{id}"
      body: "policy"
    };
    option (google.api.method_signature) = "id,update_mask";
  }
}

message GenericResource {
  string name = 1;
}

// Request to create occurrences in batch.
message BatchCreateOccurrencesRequest {
  // The occurrences to create.
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
}

// Response for creating occurrences in batch.
message BatchCreateOccurrencesResponse {
  // The occurrences that were created.
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
}

// modeled after Grafeas' ListOccurrence request/response
// https://github.com/grafeas/grafeas/blob/5b072a9930eace404066502b49a72e5b420d3576/proto/v1beta1/grafeas.proto#L345-L374
message ListResourcesRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;
}
// https://github.com/grafeas/grafeas/blob/5b072a9930eace404066502b49a72e5b420d3576/proto/v1beta1/grafeas.proto#L254-L271

message ListResourcesResponse {
  repeated grafeas.v1beta1.Resource resources = 1;
  string next_page_token = 2;
}

message ListGenericResourcesRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListGenericResourcesResponse {
  repeated GenericResource generic_resources = 1;
  string next_page_token = 2;
}

message ListOccurrencesRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;
}

// Response for listing occurrences.
message ListOccurrencesResponse {
  // The occurrences requested.
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
  string next_page_token = 2;
}

message UpdateOccurrenceRequest {
  string id = 1;
  grafeas.v1beta1.Occurrence occurrence = 2;
  google.protobuf.FieldMask update_mask = 3;
}
