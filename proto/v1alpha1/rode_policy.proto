// Copyright 2021 The Rode Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package rode.v1alpha1;

option go_package = "github.com/rode/rode/proto/v1alpha1";

import "google/protobuf/timestamp.proto";
import "proto/v1beta1/grafeas.proto";

message EvaluatePolicyRequest {
  // Policy is the unique identifier of a policy.
  string policy = 1;
  // ResourceUri is used to identify occurrences that should be passed to the policy evaluation in Open Policy Agent.
  string resource_uri = 2;
}

message EvaluatePolicyResponse {
  // Pass indicates whether the entire evaluation succeeded or failed.
  bool pass = 1;
  // Changed designates if the evaluation result differs from the last evaluation.
  bool changed = 2;
  // Result is a list of evaluation outputs built up by the policy.
  repeated EvaluatePolicyResult result = 3;
  // Explanation is the raw diagnostic output from Open Policy Agent when the explain parameter is included in the request. It's intended to be used
  // when writing or debugging policy.
  repeated string explanation = 4;
}

message EvaluatePolicyResult {
  // Pass designates if this individual result succeeded or failed.
  bool pass = 1;
  // Created is a timestamp set after the call to Open Policy Agent.
  google.protobuf.Timestamp created = 2;
  // Violations is a set of rule results. Even if a rule succeeded, its output will be included in Violations.
  repeated EvaluatePolicyViolation violations = 3;
}

message EvaluatePolicyViolation {
  // Id is a Rode-specific requirement that can be used to match up a rule output with the result.
  string id = 1;
  // Name is a human-friendly description of the rule.
  string name = 2;
  // Description is a longer message that explains the intention of the rule.
  string description = 3;
  // Message is a computed result with more information about why the rule was violated (e.g., number of high severity vulnerabilities discovered).
  string message = 4;
  string link = 5;
  // Pass indicates whether this rule succeeded or failed.
  bool pass = 6;
}

// EvaluatePolicyInput is used as the input when evaluating a policy in OPA.
message EvaluatePolicyInput {
  repeated grafeas.v1beta1.Occurrence occurrences = 1;
}

message ValidatePolicyRequest {
  // Policy is the raw Rego code to be validated.
  string policy = 1;
}

message ValidatePolicyResponse {
  // Policy is the raw Rego code.
  string policy = 1;
  // Compile is a flag that indicates whether compilation of the Rego code was successful.
  bool compile = 2;
  // Errors is a list of validation errors.
  repeated string errors = 3;
}

message GetPolicyRequest {
  // Id is the autogenerated id of the policy.
  string id = 1;
}

message DeletePolicyRequest {
  // Id is the autogenerated id of the policy.
  string id = 1;
}

message ListPoliciesRequest {
  // Filter is a CEL (common expression language) filter that can be used to limit results. If a filter isn't specified,
  // all policies are returned.
  string filter = 1;
  // PageSize controls the number of results.
  int32 page_size = 2;
  // PageToken can be used to retrieve a specific page of results. The ListPoliciesResponse will include the next page token.
  string page_token = 3;
}

message ListPoliciesResponse {
  // Policies is the list of policies, with the number of results controlled by the ListPoliciesRequest.Filter and ListPoliciesRequest.PageSize.
  repeated Policy policies = 1;
  // NextPageToken can be used to retrieve the next page of results. It will be empty if the caller has reached the end
  // of the result set.
  string next_page_token = 2;
}

message ListPolicyVersionsRequest {
  // Id is the unique policy identifier
  string id = 1;
  // Filter is a CEL expression that can be used to constrain which policy versions are returned.
  string filter = 2;
  // PageSize controls the number of results.
  int32 page_size = 3;
  // PageToken can be used to retrieve a specific page of results. The response will include the next page token.
  string page_token = 4;
}

message ListPolicyVersionsResponse {
  // Versions is the list of policy versions matching the filter.
  repeated PolicyEntity versions = 1;
  // NextPageToken can be used to retrieve the next set of results.
  string next_page_token = 2;
}

message UpdatePolicyRequest {
  // Policy is the Policy message. Only Policy.Name, Policy.Description, and Policy.CurrentVersion can be updated. Changes to Policy.Policy are
  // represented as new versions of a policy.
  Policy policy = 1;
}

message Policy {
  // Id is the unique autogenerated identifier of a policy.
  string id = 1;
  // Name of the policy
  string name = 2;
  // Description should be a brief message about the intention of the policy. Updates to a policy can be described in
  // the PolicyEntity.Message field.
  string description = 3;
  // CurrentVersion is the default policy version that's used when a policy is retrieved or evaluated. It's not necessarily
  // the latest, as it may be overwritten if an older policy version should be used instead.
  uint32 current_version = 4;
  // Policy contains the Rego policy code or a source location. The PolicyEntity.Version matches CurrentVersion unless
  // it was otherwise specified.
  PolicyEntity policy = 5;
  // Created is when the policy was first stored.
  google.protobuf.Timestamp created = 6;
  // Updated indicates when either an edit occurred on the policy itself or a new policy version was created.
  google.protobuf.Timestamp updated = 7;
  // Deleted is a flag controlling soft deletes. Deleted policies won't be returned by the ListPolicies RPC, but can
  // still be retrieved and evaluated.
  bool deleted = 8;
}

message PolicyEntity {
  // Version is a number that represents revisions of a policy. Policy contents are immutable, so changes to the source
  // are represented as new versions.
  uint32 version = 1;
  // Message should contain a brief summary of the changes to the policy code between the current version
  // and the previous version.
  string message = 2;
  // RegoContent contains the Rego code for a given policy. Only one of RegoContent and SourcePath should be specified.
  string rego_content = 3;
  // SourcePath is the location of the policy stored in source control.
  string source_path = 4;
  // Created represents when this policy version was stored. Policy contents are immutable, so there is no corresponding Updated field.
  google.protobuf.Timestamp created = 5;
}

// PolicyGroup is used to apply multiple policies in a single resource evaluation. It's linked to a policy via a PolicyAssignment.
// A PolicyGroup is meant to be open-ended -- it can represent an environment (e.g., dev) or
// policies around a certain compliance framework (e.g., PCI).
message PolicyGroup {
  // Name is the unique identifier for the PolicyGroup. It may only contain lowercase alphanumeric characters, dashes, and underscores.
  // It cannot be changed after creation.
  string name = 1;
  // Description is a brief summary of the intended use for the PolicyGroup.
  string description = 2;
  google.protobuf.Timestamp created = 3;
  google.protobuf.Timestamp updated = 4;
}

message GetPolicyGroupRequest {
  // Name is the unique identifier for the PolicyGroup.
  string name = 1;
}

message ListPolicyGroupsRequest {
  // Filter is a CEL (common expression language) filter that works off the fields in the PolicyGroup.
  string filter = 1;
  // PageSize is the maximum number of results. Use the ListPolicyGroupsResponse.NextPageToken to retrieve the next set.
  int32 page_size = 2;
  // PageToken can be used to retrieve a specific page of results.
  string page_token = 3;
}

message ListPolicyGroupsResponse {
  // PolicyGroups is the list of results from applying ListPolicyGroupsRequest.Filter, with a maximum number set by ListPolicyGroupsRequest.PageSize
  repeated PolicyGroup policy_groups = 1;
  // NextPageToken can be used to retrieve the subsequent page of results by setting ListPolicyGroupsRequest.NextPageToken
  string next_page_token = 2;
}

// PolicyEvaluation describes the result of a request to evaluate a particular resource version against a specific policy.
// This is a child of ResourceEvaluation.
message PolicyEvaluation {
  // Id represents the unique identifier (UUID) for this particular policy evaluation.
  string id = 1;

  // ResourceEvaluationId represents the unique identifier (UUID) of the resource evaluation that triggered this policy evaluation.
  string resource_evaluation_id = 2;

  // Pass represents the overall status for this policy evaluation.
  bool pass = 3;

  // PolicyVersionId represents the ID of the policy version that was evaluated.
  string policy_version_id = 4;

  // Violations is a list of rule results. Even if a rule passed, its output will be included in Violations.
  repeated EvaluatePolicyViolation violations = 5;
}

// PolicyAssignment represents a link between a policy and a policy group. Assignments can only be done against policy versions, to allow
// for a safe rollout of new changes.
message PolicyAssignment {
  // Id uniquely identifies the policy assignment. It is also a path that can be used to retrieve, update or delete the assignment.
  string id = 1;
  // PolicyVersionId is the unique identifier (UUID) of a PolicyEntity. The version must exist at the time of assignment.
  string policy_version_id = 2;
  // PolicyGroup is corresponds to PolicyGroup.Name. The group must exist at the time of creation.
  string policy_group = 3;
  google.protobuf.Timestamp created = 4;
  google.protobuf.Timestamp updated = 5;
}

message GetPolicyAssignmentRequest {
  string id = 1;
}

message DeletePolicyAssignmentRequest {
  string id = 1;
}

message ListPolicyAssignmentsRequest {
  string filter = 1;
  int32 page_size = 2;
  string page_token = 3;

  string policy_id = 4;
  string policy_group = 5;
}

message ListPolicyAssignmentsResponse {
  repeated PolicyAssignment policy_assignments = 1;
  string next_page_token = 2;
}
